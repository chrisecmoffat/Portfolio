import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Callable;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

class Processor implements Callable {
	
	private CountDownLatch latch;
	private int id;
	private volatile int count = 0;
	private int blockSize;
	private int startBlock;
	private int endBlock;
	private List<Integer> list1 = new ArrayList<Integer>();
	
	public Processor(int id, int blockSize, CountDownLatch latch) {
	
		this.id = id;
		this.blockSize = blockSize;
		this.startBlock = (id * blockSize);
		this.endBlock = ((id * blockSize) + blockSize);
		this.latch = latch;
	}
	
	public void run() {
		
		for (int i = startBlock; i < endBlock; i++) {		

			String b = Integer.toBinaryString(i);
			
			if (b.length() % 2 == 0) {
				
				String c = (b.substring(0, ((b.length()/2)-1)));
				String d = (b.substring(((b.length()/2)+1), (b.length())));
				
				if (((c).equals(new StringBuilder(d).reverse().toString()))) {
					//System.out.println(Integer.parseInt(b,2) + " binary: " + b);
					list1.add(Integer.parseInt(b,2));
					count++;
				} 
			}
			else {
				String c = (b.substring(0, ((b.length()-1)/2)));
				String d = (b.substring(((b.length()+1)/2), (b.length())));	
				
				if (((c).equals(new StringBuilder(d).reverse().toString()))) {
					//System.out.println(Integer.parseInt(b,2) + " binary: " + b);
					list1.add(Integer.parseInt(b,2));
					count++;
				} 
			}
		}
		System.out.println("Completed: " + id + " Count: " + count + " List: " + list1);
	}

	@Override
	public Object call() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}
}


public class bigBux {
	
	//private static List<Integer> list1 = new ArrayList<Integer>();

	public static void main(String[] args) {
		
		long start = System.currentTimeMillis();
		
		CountDownLatch latch = new CountDownLatch(4);
		ExecutorService executor = Executors.newFixedThreadPool(4);
		
		System.out.println("All tasks submitted.");
		
		for (int i = 0; i < 8; i++) {
			executor.submit(new Processor(i, 100, latch));
		}
		
		executor.shutdown();
		
		try {
			executor.awaitTermination(2, TimeUnit.DAYS);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out.println("All tasks completed.");
		
		long end = System.currentTimeMillis();
		
		System.out.println("Time taken: " + (end - start));
		
	}	
}
